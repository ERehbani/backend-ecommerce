paths:
  /api/products:
    get:
      summary: Get all products from the database
      tags:
        - Products
      responses:
        "200":
          description: All products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Products"
    post:
      summary: Create a product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createProduct"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
  /api/products/{id}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters: 
      - name: id
        in: path
        required: true
        description: ID of the product to be fetched
        schema:
          type: string
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
    put:
      summary: Update a product by ID
      tags:
        - Products
      parameters:
      - name: id
        in: path
        required: true
        description: ID of the product to be updated
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createProduct"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product updated successfully
        "400":
          description: Error updating the product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a product by ID
      tags:
        - Products
      parameters:
      - name: id
        in: path
        required: true
        description: ID of the product to be deleted
        schema:
          type: string
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
                  deletedProduct:
                    $ref: "#/components/schemas/Products"
        "400":
          description: The product you want to delete does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Products:
      type: object
      properties:
        _id:
          type: string
          description: Auto-generated ID by MongoDB
        title:
          type: string
          description: Product title
        description:
          type: string
          description: Product description
        code:
          type: string
          description: Unique product code
        price:
          type: number
          description: Product price
        stock:
          type: number
          description: Available stock of the product
        status:
          type: boolean
          description: Availability status of the product
        category:
          type: string
          description: Product category
        thumbnail:
          type: array
          items:
            type: string
            format: uri
          description: Product images
        owner:
          type: string
          description: Email of the user to whom the product belongs
      example:
        _id: "65c16244a34c623a26501f64"
        title: Marolio Pasta Pack
        description: 500g pasta pack
        code: "9001002"
        price: 500
        stock: 250
        status: true
        category: Food
        thumbnail:
          - "https://maxiconsumo.com/media/catalog/product/cache/8313a15b471f948db4d9d07d4a9f04a2/2/1/21645_1715226028663c45ac4f4f04.98123354.jpg"
        owner: dibu@gmail.com
    createProduct:
      type: object
      properties:
        title:
          type: string
          description: Product title
        description:
          type: string
          description: Product description
        code:
          type: string
          description: Unique product code
        price:
          type: number
          description: Product price
        stock:
          type: number
          description: Available stock of the product
        status:
          type: boolean
          description: Availability status of the product
        category:
          type: string
          description: Product category
        thumbnail:
          type: array
          items:
            type: string
            format: uri
          description: Product images
        owner:
          type: string
          description: Email of the user to whom the product belongs
      example:
        title: Marolio Pasta Pack
        description: 500g pasta pack
        code: "9001002"
        price: 500
        stock: 250
        category: Food
        thumbnail:
          - "https://maxiconsumo.com/media/catalog/product/cache/8313a15b471f948db4d9d07d4a9f04a2/2/1/21645_1715226028663c45ac4f4f04.98123354.jpg"
        owner: dibu@gmail.com
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error description
